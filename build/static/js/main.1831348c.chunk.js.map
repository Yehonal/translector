{"version":3,"sources":["serviceWorker.js","conf/conf.js","deps/hw-core/react-platform/Dashboard/views/Voyager.jsx","deps/hw-core/js-common/json.js","deps/hw-core/react-platform/Dashboard/components/Fields.jsx","deps/hw-core/react-platform/Dashboard/helpers/buildFields.jsx","deps/hw-core/react-platform/Dashboard/helpers/buildInputFields.jsx","deps/hw-core/react-platform/Dashboard/views/Single.jsx","deps/hw-core/react-platform/Dashboard/Layout.jsx","deps/hw-core/react-platform/Dashboard/helpers/buildQuery.jsx","deps/hw-core/react-platform/Dashboard/views/List.jsx","deps/hw-core/react-platform/Dashboard/index.jsx","deps/hw-core/react-platform/Dashboard/Dashboard.jsx","client/Routes/Home.jsx","client/App/Router.jsx","client/App/App.context.jsx","client/App/App.jsx","index.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","websiteUrl","sitemapBase","basePath","apiUrl","clientPort","prerender","enabled","port","host","cache_maxpages","cache_ttl","path","introspectionProvider","_x","_introspectionProvider","apply","this","arguments","_callee","query","response","regenerator_default","a","wrap","_context","prev","next","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","abrupt","stop","Voyager","react_default","createElement","voyager_lib","introspection","workerURI","process","parseData","data","parse","e","getName","name","replacements","fields","map","v","format","replace","all","ManyRefField","_ref","source","_ref$record","record","info","length","singular","pluralize","lSingular","charAt","toLowerCase","slice","reference","infoData","nameField","idField","total","res","k","key","href","Chip_default","label","push","ManyRefInputField","_ref2","_ref2$record","children","props","Object","objectWithoutProperties","ids","node","ReferenceArrayInput","assign","AutocompleteArrayInput","optionText","optionValue","RefField","_ref3","_ref3$record","buildFields","type","jsxFields","jsxFieldsExpand","isSingular","infoKey","keys","forEach","n","opt","api","modelInfo","GraphQLScalarType","GraphQLEnumType","SelectField","choices","getValues","id","labels","Fields_RefField","Fields_ManyRefField","NumberField","DateField","showTime","BooleanField","FunctionField","render","style","width","alt","src","picture","RichTextField","concat","buildInputFields","action","nonNull","GraphQLNonNull","validators","ofType","modelOpt","required","validate","notEmpty","val","trim","msg","GraphQLInputObjectType","ImageInput","accept","placeholder","ImageField","SelectInput","NumberInput","DateInput","BooleanInput","canHtml","ra_input_rich_text_esm","TextInput","ReferenceInput","Fields_ManyRefInputField","CustomShow","introspectionResults","parentProps","_typeMap","_fields","_buildFields","Show","SimpleShowLayout","CustomEdit","Edit","title","SimpleForm","CustomCreate","Create","MyUserMenu","UserMenu","MenuItemLink","to","primaryText","leftIcon","Settings_default","MyAppBar","AppBar","userMenu","Layout_MyUserMenu","MyLayout","Layout","appBar","helpers_buildQuery","raFetchType","resourceName","params","limit","offset","order","where","resource","queries","find","r","outTypeName","outType","types","lName","resInfo","searchFields","in","pagination","perPage","page","filter","_where","and","q","or","defineProperty","like","_loop","value","field","substring","addCond","condition","eq","Array","isArray","sort","fieldsGQL","kind","connection","edges","f","nodeType","lNodeName","nodeInfo","hasName","nodeIdField","nodeNameFields","join","gql","_templateObject","variables","parseResponse","_templateObject2","_templateObject3","isUpdate","updateArgs","inputTypeName","inputType","fieldsObj","inputFields","inputs","queryInfo","optType","assocInfo","associations","assoc","foreignIdentifier","rawFile","varArgs","gqlStr","_vars","_templateObject4","previousData","ListFilter","jsxInputFields","SelectArrayInput","Filter","alwaysOn","ExpandPanel","views_List","rootInfoKey","List","lodash","startCase","filters","List_ListFilter","Datagrid","rowClick","expand","List_ExpandPanel","EditButton","Dashboard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","dataProvider","resourceList","client","introspectionQuery","rawIntrospectionQuery","getSchema","schema","buildClientSchema","introRes","_queryType","queryName","GraphQLList","args","infoQuery","list","isReference","Resource","show","Single_CustomShow","edit","Single_CustomEdit","create","Single_CustomCreate","icon","PostIcon","options","buildGraphQLProvider","buildQuery","setState","_this2","react_apollo_browser_umd","Admin","customRoutes","Route","appLayout","AppLayout","Component","Home","react_platform_Dashboard","Router","BrowserRouter","basename","conf","Switch","component","AppCtxStore","React","createContext","AppContext","autoBind","assertThisInitialized","localStorage","getItem","user","posts","onbeforeunload","setItem","bind","objectSpread","post","toConsumableArray","Provider","Consumer","context","library","add","faHome","faRssSquare","faExternalLinkAlt","App","toggle","isOpen","prerenderReady","App_context_AppContext","appCtx","authLink","setContext","_","token","authorization","httpLink","createUploadLink","uri","ApolloClient","link","cache","InMemoryCache","jsx","client_App_App","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","URL","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1831348c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","var config = {\r\n    websiteUrl: 'http://127.0.0.1:3000',\r\n    sitemapBase: \"http://127.0.0.1:3000\",\r\n    basePath: \"/\" ,\r\n    apiUrl: 'http://127.0.0.1:4000',\r\n    clientPort: '3000',\r\n    prerender: {\r\n        enabled: false,\r\n        port: 60000,\r\n        host: 'http://127.0.0.1',\r\n        cache_maxpages: 1000,\r\n        cache_ttl: 3600\r\n    },\r\n    path: 'graphql'\r\n}\r\n\r\nexport default config;","import React from \"react\";\r\nimport { Voyager } from 'graphql-voyager';\r\nimport \"graphql-voyager/dist/voyager.css\";\r\nimport fetch from 'isomorphic-fetch';\r\n\r\nimport config from \"@this/conf/conf.js\"\r\n\r\nexport async function introspectionProvider(query) {\r\n    let response = await fetch(config.apiUrl + \"/\" + config.path, {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ query: query }),\r\n    });\r\n\r\n    return await response.json();\r\n}\r\n\r\nexport default () => <Voyager introspection={introspectionProvider} workerURI={process.env.PUBLIC_URL + '/voyager.worker.js'} />","export const parseData = (data) => {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch(e) {\r\n        return null;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport pluralize from \"pluralize\";\r\nimport { AutocompleteArrayInput, ReferenceArrayInput, AutocompleteInput, ReferenceInput } from \"react-admin\"\r\nimport { parseData } from \"@hw-core/js-common/json\"\r\n\r\n\r\n\r\nconst getName = (name, data) => {\r\n    if (typeof name === \"object\") {\r\n        let replacements = {};\r\n        name.fields.map(v => replacements[\"%\" + v + \"%\"] = data[v]);\r\n\r\n        return name.format.replace(/%\\w+%/g, function (all) {\r\n            return replacements[all] || all;\r\n        });\r\n    } else {\r\n        return name;\r\n    }\r\n}\r\n\r\nconst ManyRefField = ({ source, record = {}, info }) => {\r\n    if (!record[source][\"edges\"] || !record[source][\"edges\"].length)\r\n        return <span></span>;\r\n\r\n    let singular = pluralize.singular(source);\r\n    let lSingular = singular.charAt(0).toLowerCase() + singular.slice(1);\r\n    let infoKey = lSingular + \"Default\";\r\n    let reference = lSingular + \"Get\";\r\n    let infoData = parseData(info[infoKey]);\r\n\r\n    let nameField = infoData.name || \"name\";\r\n    let idField = infoData.idField || \"id\";\r\n\r\n    let total = record[source][\"count\"];\r\n    const max = 3;\r\n\r\n    let res = record[source][\"edges\"].map((v, k) => {\r\n        let name = (info && info.name && getName(info.name, v[\"node\"])) || v[\"node\"][nameField] || v[\"node\"][idField];\r\n\r\n        return <a key={k} href={\"#/\" + reference + \"/\" + v[\"node\"][idField]}>\r\n            <Chip label={name}></Chip>\r\n        </a>\r\n    });\r\n\r\n    if (total > max) {\r\n        res.push(<Chip key={-1} label={\"+\" + (total - max)}></Chip>)\r\n    }\r\n\r\n    return res;\r\n};\r\n\r\nManyRefField.propTypes = {\r\n    label: PropTypes.string,\r\n    record: PropTypes.object,\r\n    source: PropTypes.string.isRequired,\r\n};\r\n\r\nconst ManyRefInputField = ({ source, record = {}, children, info, ...props, }) => {\r\n    let singular = pluralize.singular(source);\r\n    let lSingular = singular.charAt(0).toLowerCase() + singular.slice(1);\r\n    let infoKey = lSingular + \"Default\";\r\n    let reference = lSingular + \"Get\";\r\n    let infoData = parseData(info[infoKey]);\r\n\r\n    let nameField = infoData.name || \"name\";\r\n    let idField = infoData.idField || \"id\";\r\n\r\n    if (record[source]) {\r\n\r\n        let ids = record[source][\"edges\"] ? record[source][\"edges\"].map((v, k) => {\r\n            return v.node[idField];\r\n        }) : [];\r\n\r\n        if (!record[source][\"ids\"])\r\n            record[source][\"ids\"] = ids;\r\n    }\r\n\r\n    return <ReferenceArrayInput label={source} source={source + \".ids\"} record={record} reference={reference} {...props}>\r\n        <AutocompleteArrayInput optionText={nameField} optionValue={idField}></AutocompleteArrayInput>\r\n    </ReferenceArrayInput>;\r\n};\r\n\r\nManyRefInputField.propTypes = {\r\n    label: PropTypes.string,\r\n    record: PropTypes.object,\r\n    source: PropTypes.string.isRequired,\r\n};\r\n\r\nconst RefField = ({ source, record = {}, info }) => {\r\n    let singular = pluralize.singular(source);\r\n    let lSingular = singular.charAt(0).toLowerCase() + singular.slice(1);\r\n    let infoKey = lSingular + \"Default\";\r\n    let reference = lSingular + \"Get\";\r\n    let infoData = parseData(info[infoKey]);\r\n\r\n    let nameField = infoData.name || \"name\";\r\n    let idField = infoData.idField || \"id\";\r\n\r\n    let name = (info && info.name && getName(info.name, record[source])) || record[source][nameField] || record[source][idField];\r\n    return <a href={\"#/\" + reference + \"/\" + record[source][idField]}><Chip label={name}></Chip></a>\r\n};\r\n\r\nRefField.propTypes = {\r\n    label: PropTypes.string,\r\n    record: PropTypes.object,\r\n    source: PropTypes.string.isRequired,\r\n};\r\n\r\nconst RefInputField = ({ source, record = {}, children, info, ...props, }) => {\r\n    let singular = pluralize.singular(source);\r\n    let lSingular = singular.charAt(0).toLowerCase() + singular.slice(1);\r\n    let infoKey = lSingular + \"Default\";\r\n    let reference = lSingular + \"Get\";\r\n    let infoData = parseData(info[infoKey]);\r\n\r\n    let nameField = infoData.name || \"name\";\r\n    let idField = infoData.idField || \"id\";\r\n\r\n    if (record[source]) {\r\n\r\n        let ids = record[source][\"edges\"] ? record[source][\"edges\"].map((v, k) => {\r\n            return v.node[idField];\r\n        }) : [];\r\n\r\n        if (!record[source][\"ids\"])\r\n            record[source][\"ids\"] = ids;\r\n    }\r\n\r\n    return <ReferenceInput label={source} source={source + \".ids\"} record={record} reference={reference} {...props}>\r\n        <AutocompleteInput optionText={nameField} optionValue={idField} />\r\n    </ReferenceInput>;\r\n};\r\n\r\nRefInputField.propTypes = {\r\n    label: PropTypes.string,\r\n    record: PropTypes.object,\r\n    source: PropTypes.string.isRequired,\r\n};\r\n\r\nexport {\r\n    ManyRefField,\r\n    ManyRefInputField,\r\n    RefField,\r\n    RefInputField\r\n}","import React from 'react';\r\nimport pluralize from 'pluralize';\r\nimport { FunctionField, ImageField, SelectField, NumberField, DateField, RichTextField, BooleanField, TextField } from \"react-admin\"\r\nimport { GraphQLScalarType, GraphQLEnumType } from \"graphql\"\r\nimport { ManyRefField, RefField } from \"../components/Fields\"\r\nimport { parseData } from \"@hw-core/js-common/json\"\r\n\r\nexport default (type, fields, info) => {\r\n    let jsxFields = [], jsxFieldsExpand = [];\r\n\r\n    let infoData;\r\n    if (!pluralize.isSingular(type)) {\r\n        let singular = pluralize.singular(type);\r\n\r\n        let infoKey = singular.charAt(0).toLowerCase() + singular.slice(1) + \"Default\";\r\n        infoData = parseData(info[infoKey]);\r\n    } else {\r\n        let infoKey = type.charAt(0).toLowerCase() + type.slice(1) + \"Default\";\r\n        infoData = parseData(info[infoKey]);\r\n    }\r\n\r\n    Object.keys(fields).forEach((n, k) => {\r\n        let v = fields[n];\r\n\r\n        let opt = {};\r\n        let modelOpt = {};\r\n\r\n        if (infoData) {\r\n            if (infoData.api && infoData.api[\"fetch\"] && infoData.api[\"fetch\"].fields && infoData.api[\"fetch\"].fields[v.name])\r\n                opt = infoData.api[\"fetch\"].fields[v.name];\r\n            if (infoData.modelInfo)\r\n                modelOpt = infoData.modelInfo.fields[v.name];\r\n        }\r\n\r\n        if (v.type instanceof GraphQLScalarType) {\r\n            switch (v.type.name) {\r\n                case \"Int\":\r\n                case \"Float\":\r\n                    jsxFieldsExpand.push(<NumberField key={k} source={v.name} />)\r\n                    return;\r\n                case \"Date\":\r\n                    jsxFields.push(<DateField key={k} source={v.name} showTime />);\r\n                    return;\r\n                case \"Boolean\":\r\n                    jsxFields.push(<BooleanField key={k} source={v.name} />);\r\n                    return;\r\n                case \"pictureType\":\r\n                    jsxFields.push(<FunctionField key={k} label={v.name} render={v => <img style={{ width: 200 }} alt={v.name} src={\"http://localhost:4000/\" + v.picture} />}></FunctionField>);\r\n                    return;\r\n                default:\r\n                    jsxFields.push(<RichTextField key={k} source={v.name} />);\r\n                    return;\r\n            }\r\n\r\n        } else if (v.type instanceof GraphQLEnumType) {\r\n            jsxFields.push(<SelectField key={k} source={v.name} choices={v.type.getValues().map((v, k) => ({ id: v.name, name: opt.labels ? opt.labels[k] : v.name }))} />)\r\n            return;\r\n        } else {\r\n            if (!pluralize.isSingular(v.name)) {\r\n                jsxFields.push(<ManyRefField key={k} source={v.name} label={v.name} info={info} />);\r\n            } else {\r\n                jsxFieldsExpand.push(<RefField key={k} source={v.name} label={v.name} info={info} />);\r\n            }\r\n\r\n            return;\r\n        }\r\n    });\r\n\r\n    jsxFieldsExpand = jsxFieldsExpand.concat(jsxFields);\r\n\r\n    return {\r\n        jsxFields,\r\n        jsxFieldsExpand\r\n    }\r\n}","import React from 'react';\r\nimport pluralize from 'pluralize';\r\nimport {\r\n    FunctionField, SelectInput, ImageField, ImageInput, NumberInput, DateInput, BooleanInput, TextInput,\r\n    AutocompleteInput, AutocompleteArrayInput, ReferenceInput, ReferenceArrayInput, SelectArrayInput,\r\n    required,\r\n    minLength,\r\n    maxLength,\r\n    minValue,\r\n    maxValue,\r\n    number,\r\n    regex,\r\n    email,\r\n    choices\r\n} from \"react-admin\"\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport { GraphQLScalarType, GraphQLEnumType, GraphQLNonNull, GraphQLInputObjectType } from \"graphql\"\r\nimport { ManyRefInputField, RefField } from \"../components/Fields\"\r\nimport { parseData } from \"@hw-core/js-common/json\"\r\n\r\nexport default (type, action, fields, info) => {\r\n    let jsxFields = [];\r\n\r\n    let infoData;\r\n    if (!pluralize.isSingular(type)) {\r\n        let singular = pluralize.singular(type);\r\n\r\n        let infoKey = singular.charAt(0).toLowerCase() + singular.slice(1) + \"Default\";\r\n        infoData = parseData(info[infoKey]);\r\n    } else {\r\n        let infoKey = type.charAt(0).toLowerCase() + type.slice(1) + \"Default\";\r\n        infoData = parseData(info[infoKey]);\r\n    }\r\n\r\n    Object.keys(fields).forEach((n, k) => {\r\n        let nonNull = fields[n].type instanceof GraphQLNonNull;\r\n        let v = fields[n];\r\n\r\n        var validators = [];\r\n\r\n        let type = nonNull ? v.type.ofType : v.type;\r\n\r\n        let opt = {};\r\n        let modelOpt = {};\r\n\r\n        if (infoData) {\r\n            if (infoData.api && infoData.api[action] && infoData.api[action].fields && infoData.api[action].fields[v.name])\r\n                opt = infoData.api[action].fields[v.name];\r\n            if (infoData.modelInfo)\r\n                modelOpt = infoData.modelInfo.fields[v.name];\r\n        }\r\n\r\n        //TODO: hacky, to improve\r\n        if ((infoData && v.name === infoData.idField) || v.name === \"id\" || v.name === \"createdAt\" || v.name === \"updatedAt\")\r\n            return;\r\n\r\n        if (nonNull) {\r\n            validators.push(required())\r\n        }\r\n\r\n        if (modelOpt) {\r\n            if (modelOpt.validate) {\r\n                if (modelOpt.validate.notEmpty) {\r\n                    validators.push((val) => {\r\n                        if (!val || !val.trim())\r\n                            return modelOpt.validate.notEmpty.msg\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (opt.type === \"Picture\" || (type instanceof GraphQLInputObjectType && type.name === \"pictureTypeInput\")) {\r\n\r\n            jsxFields.push(\r\n                <ImageInput source={v.name} label={v.name} accept=\"image/*\" placeholder={<p>Drop your file here</p>} validate={validators}>\r\n                    <ImageField src={\"http://localhost:4000/\" + v.picture} />\r\n                </ImageInput>\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (opt.type === \"Enum\" || type instanceof GraphQLEnumType) {\r\n            let labels = opt.labels || [];\r\n\r\n            jsxFields.push(<SelectInput key={k} source={v.name} choices={type.getValues().map((val, key) => ({ id: val.name, name: labels[key] || val.name }))} validate={validators} />)\r\n            return;\r\n        }\r\n\r\n        if (type instanceof GraphQLScalarType) {\r\n            switch (type.name) {\r\n                case \"Int\":\r\n                case \"Float\":\r\n                    jsxFields.push(<NumberInput key={k} source={v.name} validate={validators} />)\r\n                    return;\r\n                case \"Date\":\r\n                    jsxFields.push(<DateInput key={k} source={v.name} showTime validate={validators} />);\r\n                    return;\r\n                case \"Boolean\":\r\n                    jsxFields.push(<BooleanInput key={k} source={v.name} validate={validators} />);\r\n                    return;\r\n                default:\r\n                    jsxFields.push(opt.canHtml ? <RichTextInput key={k} source={v.name} validate={validators} /> : <TextInput key={k} source={v.name} validate={validators} />);\r\n                    return;\r\n            }\r\n        }\r\n\r\n        if (!pluralize.isSingular(v.name)) {\r\n            jsxFields.push(<ManyRefInputField source={v.name} info={info}></ManyRefInputField >)\r\n        } else {\r\n            jsxFields.push(<ReferenceInput source={v.name} info={info}></ReferenceInput >)\r\n        }\r\n\r\n        return;\r\n    });\r\n\r\n    return {\r\n        jsxFields\r\n    }\r\n}","import React from 'react';\r\nimport { Show, SimpleShowLayout, SimpleForm, Edit, Create } from 'react-admin';\r\n\r\nimport buildFields from \"../helpers/buildFields\"\r\nimport buildInputFields from \"../helpers/buildInputFields\"\r\n\r\nexport const CustomShow = ({ type, introspectionResults, info, parentProps }) => {\r\n    console.log(parentProps)\r\n\r\n    let fields = introspectionResults._typeMap[type]._fields;\r\n\r\n    const { jsxFields, jsxFieldsExpand } = buildFields(type, fields, info)\r\n\r\n    return (\r\n        <Show {...parentProps}>\r\n            <SimpleShowLayout>\r\n                {jsxFieldsExpand}\r\n            </SimpleShowLayout>\r\n        </Show>\r\n    )\r\n};\r\n\r\nexport const CustomEdit = ({ type, introspectionResults, info, parentProps }) => {\r\n    console.log(parentProps)\r\n\r\n    let fields = introspectionResults._typeMap[type + \"EditInput\"]._fields;\r\n\r\n    const { jsxFields } = buildInputFields(type, \"update\", fields, info)\r\n\r\n    return (\r\n        <Edit title={<span>Edit {type}</span>}  {...parentProps}>\r\n            <SimpleForm>\r\n                {jsxFields}\r\n            </SimpleForm>\r\n        </Edit>\r\n    )\r\n};\r\n\r\nexport const CustomCreate = ({ type, introspectionResults, info, parentProps }) => {\r\n    console.log(parentProps)\r\n\r\n    let fields = introspectionResults._typeMap[type + \"AddInput\"]._fields;\r\n\r\n    const { jsxFields } = buildInputFields(type, \"create\", fields, info)\r\n\r\n    return (\r\n        <Create title={<span>Create {type}</span>} {...parentProps}>\r\n            <SimpleForm>\r\n                {jsxFields}\r\n            </SimpleForm>\r\n        </Create>\r\n    )\r\n};","import React from \"react\"\r\nimport { Layout } from 'react-admin';\r\n\r\nimport { AppBar, UserMenu, MenuItemLink } from 'react-admin';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst MyUserMenu = props => (\r\n    <UserMenu {...props}>\r\n        <MenuItemLink\r\n            to=\"/db_schema\"\r\n            primaryText=\"DB Schema\"\r\n            leftIcon={<SettingsIcon />}\r\n        />\r\n    </UserMenu>\r\n);\r\n\r\nconst MyAppBar = props => <AppBar {...props} userMenu={<MyUserMenu />} />;\r\n\r\nconst MyLayout = props => <Layout\r\n    {...props}\r\n    appBar={MyAppBar}\r\n/>;\r\n\r\nexport default MyLayout;","import gql from \"graphql-tag\"\r\n\r\nimport { parseData } from \"@hw-core/js-common/json\"\r\n\r\nexport default (introspectionResults, infoData) => (raFetchType, resourceName, params) => {\r\n\r\n    const resource = introspectionResults.queries.find(r => r.name === resourceName);\r\n\r\n    let outTypeName = resource.type.ofType.name;\r\n\r\n    const outType = introspectionResults.types.find(r => r.name === outTypeName);\r\n\r\n    let lName = outTypeName.charAt(0).toLowerCase() + outTypeName.slice(1);\r\n\r\n    var resInfo = parseData(infoData[lName + \"Default\"]);\r\n    let idField = resInfo.idField || \"id\";\r\n\r\n    var searchFields = (resInfo && resInfo.searchFields) || [\"name\"];\r\n\r\n    let limit, offset, order, id, where;\r\n    if (params) {\r\n        if (params.ids) {\r\n            id = { in: params.ids }\r\n        } else if (params.id) {\r\n            id = params.id;\r\n        }\r\n\r\n        if (params.pagination && params.pagination.perPage) {\r\n            limit = params.pagination.perPage;\r\n            offset = limit * (params.pagination.page - 1);\r\n        }\r\n\r\n        if (params.filter) {\r\n            let _where = { and: [] }\r\n            if (params.filter.q) {\r\n                _where.and.push({\r\n                    \"or\": searchFields.map(v => ({\r\n                        [v]: { like: \"%\" + params.filter.q.replace(/ /g, \"%\") + \"%\" }\r\n                    }))\r\n                })\r\n            }\r\n\r\n            delete params.filter.q;\r\n\r\n            for (let id in params.filter) {\r\n                let value = params.filter[id];\r\n                let field = id.substring(1); // remove \"_\" character\r\n\r\n                const addCond = (value) => {\r\n                    let condition;\r\n                    switch (typeof value) {\r\n                        case \"number\":\r\n                            condition = { eq: value }\r\n                            break;\r\n                        case \"boolean\":\r\n                            condition = value\r\n                            break;\r\n                        case \"string\":\r\n                        default:\r\n                            condition = { like: \"%\" + value + \"%\" }\r\n                            break;\r\n                    }\r\n\r\n                    return {\r\n                        [field]: condition\r\n                    }\r\n                }\r\n\r\n                if (Array.isArray(value)) {\r\n                    _where.and.push({\r\n                        or: value.map(v => addCond(v))\r\n                    })\r\n                } else {\r\n                    _where.and.push(addCond(value));\r\n                }\r\n            }\r\n\r\n            where = JSON.stringify(_where);\r\n        }\r\n\r\n        if (params.sort && params.sort.field) {\r\n            order = params.sort.order === \"DESC\" ? \"reverse:\" + params.sort.field : params.sort.field;\r\n        }\r\n    }\r\n\r\n\r\n    let fieldsGQL = outType.fields.map(v => {\r\n        // && edges.type.ofType.kind===\"Object\"*/\r\n        switch (v.type.kind) {\r\n            case \"OBJECT\":\r\n                let connection = introspectionResults.types.find(r => r.name === v.type.name)\r\n                if (connection) {\r\n                    let edges = connection.fields.find(f => f.name === \"edges\");\r\n                    if (edges && edges.type.kind === \"LIST\") {\r\n\r\n                        let edge = introspectionResults.types.find(r => r.name === edges.type.ofType.name)\r\n                        let node = edge.fields.find(r => r.name === \"node\")\r\n                        let nodeType = introspectionResults.types.find(r => r.name === node.type.name)\r\n\r\n                        let lNodeName = nodeType.name.charAt(0).toLowerCase() + nodeType.name.slice(1);\r\n                        let nodeInfo = parseData(infoData[lNodeName + \"Default\"]) || {};\r\n                        let hasName = nodeType.fields.find(r => r.name === \"name\")\r\n\r\n                        let nodeIdField = nodeInfo.idField || \"id\";\r\n                        let nodeNameFields = !nodeInfo.name ?\r\n                            (hasName ? \"name\" : \"\") :\r\n                            (typeof nodeInfo.name === \"string\" ? nodeInfo.name : nodeInfo.name.fields.join(\"\\n\"));\r\n\r\n\r\n                        return `${v.name}(limit:3) { edges {\r\n                            node {\r\n                                ${nodeIdField}\r\n                                ${nodeNameFields}\r\n                            } } \r\n                                count\r\n                        }`\r\n                    } else {\r\n                        let nodeType = introspectionResults.types.find(r => r.name === v.name)\r\n                        let hasName = nodeType.fields.find(r => r.name === \"name\")\r\n\r\n                        let lNodeName = nodeType.name.charAt(0).toLowerCase() + nodeType.name.slice(1);\r\n                        let nodeInfo = parseData(infoData[lNodeName + \"Default\"]);\r\n\r\n                        let nodeIdField = nodeInfo.idField || \"id\";\r\n                        let nodeNameFields = !nodeInfo.name ?\r\n                            (hasName ? \"name\" : \"\") :\r\n                            (typeof nodeInfo.name === \"string\" ? nodeInfo.name : nodeInfo.name.fields.join(\"\\n\"));\r\n\r\n                        return `${v.name} { \r\n                            ${nodeIdField}\r\n                            ${nodeNameFields}\r\n                        }`\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n\r\n        return v.name;\r\n    }).join(\"\\n\");\r\n\r\n\r\n    switch (raFetchType) {\r\n        case \"GET_LIST\":\r\n            return {\r\n                query: gql`query ${resource.name}($limit:Int,$offset:Int,$order: String,$where: SequelizeJSON) {\r\n                    data: ${resource.name}(limit:$limit, offset:$offset, order: $order, where: $where) {\r\n                        ${fieldsGQL}\r\n                    },\r\n                    total: ${lName}Count\r\n                }`,\r\n\r\n                variables: {\r\n                    limit,\r\n                    offset,\r\n                    order,\r\n                    where\r\n                },\r\n                parseResponse: response => {\r\n                    if (response.data.data.length && !response.data.data[0].id) {\r\n                        response.data.data = response.data.data.map((v, k) => {\r\n                            v.id = k;\r\n                            return v;\r\n                        })\r\n                    }\r\n\r\n                    return response.data\r\n                },\r\n            }\r\n        case \"GET_MANY\":\r\n        case \"GET_MANY_REFERENCE\":\r\n\r\n            where = {\r\n                [idField]: id\r\n            }\r\n\r\n            return {\r\n                query: gql`query ${resource.name}($limit:Int,$offset:Int,$order: String,$where: SequelizeJSON) {\r\n                    data: ${resource.name}(limit:$limit, offset:$offset, order: $order, where: $where) {\r\n                        ${fieldsGQL}\r\n                    },\r\n                    total: ${lName}Count(where: $where)\r\n                }`,\r\n\r\n                variables: {\r\n                    limit,\r\n                    offset,\r\n                    order,\r\n                    where: JSON.stringify(where)\r\n                }, // params = { id: ... }\r\n                parseResponse: response => { return response.data },\r\n            }\r\n        case \"GET_ONE\":\r\n            where = {\r\n                [idField]: id\r\n            }\r\n\r\n            return {\r\n                query: gql`query ${resource.name}($where: SequelizeJSON) {\r\n                    data: ${resource.name}(where: $where) {\r\n                        ${fieldsGQL}\r\n                    }\r\n                }`,\r\n\r\n                variables: {\r\n                    where\r\n                },\r\n                parseResponse: response => {\r\n                    if (response.data.data.length && !response.data.data[0].id) {\r\n                        response.data.data = response.data.data.map((v, k) => {\r\n                            v.id = k;\r\n                            return v;\r\n                        })\r\n                    }\r\n\r\n                    return { data: response.data.data[0] }\r\n                },\r\n            }\r\n        case \"CREATE\":\r\n        case \"UPDATE\":\r\n            let action = raFetchType === \"CREATE\" ? \"Add\" : \"Edit\";\r\n            let isUpdate = raFetchType === \"UPDATE\", updateArgs = \", set: true\";\r\n\r\n            let inputTypeName = resource.type.ofType.name + action + \"Input\";\r\n            const inputType = introspectionResults.types.find(r => r.name === inputTypeName && r.kind === \"INPUT_OBJECT\");\r\n            let fieldsObj = {}\r\n            inputType.inputFields.map(f => fieldsObj[f.name] = f);\r\n\r\n            let inputs = [];\r\n            let variables = [];\r\n\r\n            Object.keys(params.data).forEach((v, k) => {\r\n\r\n                let opt = {}, modelOpt = {};\r\n\r\n                if (resInfo.api) {\r\n                    let queryInfo = resInfo.api[raFetchType.toLowerCase()];\r\n                    opt = queryInfo && queryInfo.fields && queryInfo.fields[v];\r\n                    modelOpt = resInfo.modelInfo && resInfo.modelInfo.fields[v];\r\n                }\r\n\r\n                let value = params.data[v];\r\n\r\n                if (v === \"__typename\" || v === \"createdAt\" || v === \"updatedAt\")\r\n                    return;\r\n\r\n                let kind;\r\n                let optType = opt && opt.type;\r\n                if (fieldsObj[v] && fieldsObj[v].type)\r\n                    kind = fieldsObj[v].type.kind === \"NON_NULL\" ? fieldsObj[v].type.ofType.kind : fieldsObj[v].type.kind;\r\n\r\n                if (kind === \"LIST\") {\r\n\r\n                    if (value.ids) {\r\n                        let assocInfo = resInfo.modelInfo.associations[v];\r\n                        let assoc = value.ids.map(id => `{${assocInfo.foreignIdentifier}: ${id}}`).join(\"\\n\");\r\n                        inputs.push(`${v}: [${assoc}]`);\r\n                    }\r\n                } else if (kind === \"ENUM\" || optType === \"Enum\") {\r\n                    inputs.push(`${v}: ${value}`);\r\n                } else if (kind === \"pictureTypeInput\" || optType === \"Picture\") {\r\n                    variables.push({\r\n                        name: \"picture\",\r\n                        type: \"Upload\",\r\n                        value: value.rawFile\r\n                    });\r\n\r\n                    inputs.push(`${v}: {file: $picture}`);\r\n                } else {\r\n                    switch (typeof value) {\r\n                        case \"string\":\r\n                            inputs.push(`${v}: \"${value}\"`)\r\n                            break;\r\n                        default:\r\n                            inputs.push(`${v}:${value}`)\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n\r\n            if (isUpdate) {\r\n                if (where)\r\n                    updateArgs += `, where: ${where}`\r\n\r\n                updateArgs += `, id: ${id}`;\r\n            }\r\n\r\n            let varArgs = \"\";\r\n            if (variables.length) {\r\n                varArgs = \"(\" + variables.map(v => \"$\" + v.name + \":\" + v.type).join() + \")\"\r\n            }\r\n\r\n            let gqlStr = `mutation ${lName}${action}${varArgs} {\r\n                    data: ${lName}${action}(${outTypeName}:{${inputs}}${updateArgs}) {\r\n                        ${fieldsGQL}\r\n                    }\r\n                }`\r\n\r\n            let _vars = {}\r\n            variables.forEach(v => _vars[v.name] = v.value);\r\n\r\n            return {\r\n                query: gql(gqlStr),\r\n                parseResponse: response => {\r\n                    return response.data\r\n                },\r\n                variables: _vars\r\n            }\r\n        case \"DELETE\":\r\n        case \"DELETE_MANY\":\r\n\r\n            let ids = params.ids ? params.ids : [params.id]\r\n\r\n            return {\r\n                query: gql`mutation {\r\n                    ${ids.map(v => `delete${v}: ${lName}Delete(id:${v})`)}\r\n                }`,\r\n\r\n                parseResponse: response => {\r\n                    return { data: [params.previousData] }\r\n                },\r\n            }\r\n        default:\r\n            return null;\r\n    }\r\n}","import React from \"react\"\r\nimport {\r\n    Show, SimpleShowLayout,\r\n    Filter, TextInput, SelectInput, SelectArrayInput, NumberInput, DateInput, BooleanInput, EditButton,\r\n    List, Datagrid,\r\n} from 'react-admin';\r\nimport { CustomShow } from \"./Single\"\r\nimport { GraphQLScalarType, GraphQLEnumType } from \"graphql\"\r\nimport pluralize from 'pluralize';\r\nimport { parseData } from \"@hw-core/js-common/json\"\r\nimport buildFields from \"../helpers/buildFields\"\r\nimport lodash from \"lodash\"\r\n\r\nconst ListFilter = ({ fields, info, type, ...props }) => {\r\n    //let searchFields=info.searchFields;\r\n\r\n    let infoData = info;\r\n\r\n    let jsxInputFields = Object.keys(fields).map((n, k) => {\r\n        let v = fields[n];\r\n\r\n        let opt = {};\r\n        let modelOpt = {};\r\n\r\n        if (infoData) {\r\n            if (infoData.api && infoData.api[\"fetch\"] && infoData.api[\"fetch\"].fields && infoData.api[\"fetch\"].fields[v.name])\r\n                opt = infoData.api[\"fetch\"].fields[v.name];\r\n            if (infoData.modelInfo)\r\n                modelOpt = infoData.modelInfo.fields[v.name];\r\n        }\r\n\r\n        if (v.type instanceof GraphQLScalarType) {\r\n            switch (v.type.name) {\r\n                case \"Int\":\r\n                case \"Float\":\r\n                    return <NumberInput key={k} source={\"_\" + v.name} />\r\n                case \"Date\":\r\n                    return <DateInput key={k} source={\"_\" + v.name} showTime />\r\n                case \"Boolean\":\r\n                    return <BooleanInput key={k} source={\"_\" + v.name} />\r\n                default:\r\n                    return <TextInput key={k} source={\"_\" + v.name} />\r\n            }\r\n        } else if (v.type instanceof GraphQLEnumType) {\r\n            return <SelectArrayInput  key={k} source={\"_\" + v.name} choices={v.type.getValues().map((val, key) => ({ id: val.name, name: opt.labels ? opt.labels[key] : val.name }))} />\r\n        } else {\r\n            /*if (!pluralize.isSingular(v.name)) {\r\n                let singular = pluralize.singular(v.name);\r\n\r\n                let infoKey = singular.charAt(0).toLowerCase() + singular.slice(1) + \"Default\";\r\n                let infoData = parseData(info[infoKey]);\r\n\r\n                return <ManyRefField key={k} source={v.name} label={v.name} info={infoData}></ManyRefField>\r\n            } else {\r\n\r\n                let infoKey = v.name.charAt(0).toLowerCase() + v.name.slice(1) + \"Default\";\r\n                let infoData = parseData(info[infoKey]);\r\n\r\n                return <RefField key={k} source={v.name} info={infoData} />\r\n            }*/\r\n            return null;\r\n        }\r\n    });\r\n\r\n    return <Filter {...props}>\r\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n        {jsxInputFields}\r\n    </Filter>\r\n};\r\n\r\nconst ExpandPanel = ({ fields, ...props }) => <Show {...props}>\r\n    <SimpleShowLayout>{fields}</SimpleShowLayout>\r\n</Show>\r\n\r\nexport default (props) => {\r\n    let name = props.type;\r\n    const info = props.info;\r\n    let fields = props.introspectionResults._typeMap[name]._fields;\r\n\r\n    let singular = !pluralize.isSingular(name) ? pluralize.singular(name) : name;\r\n    let rootInfoKey = singular.charAt(0).toLowerCase() + singular.slice(1) + \"Default\";\r\n\r\n    const { jsxFields, jsxFieldsExpand } = buildFields(name, fields, info);\r\n\r\n    return <List {...props.parentProps}\r\n        title={<span>{lodash.startCase(pluralize(name))}</span>}\r\n        sort={{ field: 'createdAt', order: 'DESC' }}\r\n        filters={<ListFilter fields={fields} info={parseData(info[rootInfoKey])} />\r\n        }>\r\n        <Datagrid rowClick=\"edit\" expand={<ExpandPanel fields={jsxFieldsExpand} />}>\r\n            {jsxFields}\r\n            <EditButton />\r\n        </Datagrid>\r\n    </List>\r\n}","import Dashboard from \"./Dashboard\"\r\n\r\nexport default Dashboard","import React, { Component } from 'react';\r\nimport buildGraphQLProvider from 'ra-data-graphql';\r\nimport { GraphQLList } from \"graphql\"\r\nimport { Route } from 'react-router';\r\nimport PostIcon from '@material-ui/icons/Book';\r\nimport Voyager from \"./views/Voyager\"\r\nimport { introspectionQuery as rawIntrospectionQuery, buildClientSchema } from 'graphql/utilities';\r\nimport { Admin, Resource } from 'react-admin';\r\nimport gql from \"graphql-tag\"\r\nimport { CustomShow, CustomEdit, CustomCreate } from \"./views/Single\"\r\nimport lodash from \"lodash\"\r\nimport pluralize from 'pluralize';\r\nimport AppLayout from './Layout';\r\nimport buildQuery from \"./helpers/buildQuery\"\r\nimport List from \"./views/List\"\r\nimport { parseData } from \"@hw-core/js-common/json\"\r\n\r\nimport { ApolloConsumer } from \"react-apollo\";\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dataProvider: null,\r\n            resourceList: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let client = this.client;\r\n        const introspectionQuery = gql(rawIntrospectionQuery);\r\n\r\n        const getSchema = async (client) => {\r\n            const { data } = await client.query({ query: introspectionQuery });\r\n            const schema = buildClientSchema(data);\r\n\r\n            return schema;\r\n        };\r\n\r\n        let introspectionResults = await getSchema(client);\r\n\r\n        let introRes = []\r\n        let queries = Object.keys(introspectionResults._queryType._fields).sort();\r\n        for (let id in queries) {\r\n            let queryName = queries[id];\r\n            let query = introspectionResults._queryType._fields[queryName];\r\n\r\n            if (!query || !(query.type instanceof GraphQLList))\r\n                continue;\r\n\r\n            // only tables with id field can be displayed\r\n            if (!query.args.find(v => v.name === \"id\"))\r\n                continue;\r\n\r\n            let type = query.type.ofType.name;\r\n\r\n            let lName = type.charAt(0).toLowerCase() + type.slice(1);\r\n\r\n            introRes.push({\r\n                infoQuery: lName + \"Default\",\r\n                type: type,\r\n                queryName: queryName\r\n            });\r\n        }\r\n\r\n        let infoQuery = gql`\r\n            query {\r\n                ${introRes.map(v => v.infoQuery).join(\"\\n\")}\r\n            }\r\n        `\r\n        const { data } = await client.query({ query: infoQuery });\r\n\r\n        let resourceList = [];\r\n        for (let id in introRes) {\r\n            let type = introRes[id].type;\r\n\r\n            let lName = type.charAt(0).toLowerCase() + type.slice(1) + \"Default\";\r\n            let infoData = parseData(data[lName]);\r\n\r\n            let list;\r\n            if (!infoData.isReference) {\r\n                list=(props) => (\r\n                    <List introspectionResults={introspectionResults}\r\n                        type={introRes[id].type}\r\n                        query={introRes[id].queryName}\r\n                        info={data}\r\n                        parentProps={props} />\r\n                )\r\n            }\r\n\r\n            resourceList.push(<Resource\r\n                key={introRes[id].queryName}\r\n                name={introRes[id].queryName}\r\n                show={(props) => <CustomShow introspectionResults={introspectionResults} type={introRes[id].type} info={data} parentProps={props} />}\r\n                edit={(props) => <CustomEdit introspectionResults={introspectionResults} type={introRes[id].type} info={data} parentProps={props} />}\r\n                create={(props) => <CustomCreate introspectionResults={introspectionResults} type={introRes[id].type} info={data} parentProps={props} />}\r\n                list={list}\r\n                icon={PostIcon}\r\n                options={{ label: lodash.startCase(pluralize(introRes[id].type)) }}></Resource>)\r\n        }\r\n\r\n        let dataProvider = await buildGraphQLProvider({\r\n            client,\r\n            buildQuery: (introspectionResults) => buildQuery(introspectionResults, data)\r\n        });\r\n\r\n        this.setState({ dataProvider, resourceList })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ApolloConsumer>\r\n                {client => {\r\n                    this.client = client;\r\n\r\n                    if (!this.state.dataProvider) {\r\n                        return <div>Loading...</div>\r\n                    }\r\n\r\n                    return <Admin customRoutes={[\r\n                        <Route\r\n                            path=\"/db_schema\"\r\n                            render={Voyager}\r\n                        />,\r\n                    ]} dataProvider={this.state.dataProvider} appLayout={AppLayout}>\r\n                        {this.state.resourceList}\r\n                    </Admin>\r\n                }}\r\n            </ApolloConsumer>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport Dashboard from \"@hw-core/react-platform/Dashboard\"\r\n\r\nexport default ()=><Dashboard></Dashboard>","import React from 'react';\r\nimport { Switch, Route } from 'react-router';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Dashboard from \"@this/src/client/Routes/Home\"\r\n\r\nimport conf from \"@this/conf/conf\"\r\n\r\n/**\r\n * This function is used by our sitemap generator\r\n * DO NOT REMOVE this method, just change routes to your needs\r\n * if you want to exclude some routes from sitemap just\r\n * add them directly inside the <Router>\r\n */\r\nexport const routePaths = () => (\r\n    <Switch>\r\n    </Switch>\r\n)\r\n\r\nexport default (props) => (\r\n    <Router basename={conf.basePath}>\r\n        <div>\r\n            {props.children}\r\n            {routePaths()}\r\n            <Switch>\r\n                <Route path=\"/\" component={Dashboard} />\r\n            </Switch>\r\n        </div>\r\n    </Router >\r\n);","import React from \"react\"\r\nimport autoBind from \"react-autobind\";\r\n\r\nexport const AppCtxStore = React.createContext({})\r\n\r\nexport default class AppContext extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        autoBind(this);\r\n\r\n        let data = localStorage.getItem(\"user\");\r\n\r\n        if (data)\r\n            data = JSON.parse(data)\r\n\r\n        this.state = {\r\n            user: data || { name: \"Anonymous\" },\r\n            posts: []\r\n        }\r\n\r\n        window.onbeforeunload = function () {\r\n            localStorage.setItem(\"admin_posts\", JSON.stringify(this.state.posts));\r\n        }.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Actions\r\n     * @param {*} user \r\n     */\r\n    setUser(user) {\r\n        this.setState({\r\n            user\r\n        })\r\n    }\r\n\r\n    setUserName(name) {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                name\r\n            }\r\n        })\r\n    }\r\n\r\n    addPost(post) {\r\n        this.setState({\r\n            posts: [\r\n                ...this.state.posts,\r\n                post\r\n            ]\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        let posts = localStorage.getItem(\"admin_posts\");\r\n        if (posts)\r\n            this.setState({ posts: JSON.parse(posts) })\r\n    }\r\n\r\n    render() {\r\n        return <AppCtxStore.Provider value={this}>\r\n            <AppCtxStore.Consumer>\r\n                {context => this.props.children(context)}\r\n            </AppCtxStore.Consumer>\r\n        </AppCtxStore.Provider>\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Router from \"./Router\"\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faHome, faRssSquare, faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport conf from \"@this/conf/conf\"\r\n\r\nimport AppContext from \"./App.context\"\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nlibrary.add(faHome, faRssSquare, faExternalLinkAlt);\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.prerenderReady = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext>\r\n        {appCtx =>\r\n          <Router>\r\n            \r\n          </Router>\r\n        }\r\n      </AppContext>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n\r\nimport App from \"@this/src/client/App/App.jsx\";\r\nimport config from \"@this/conf/conf.js\"\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem(\"AUTH_TOKEN\")\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\nconst httpLink = createUploadLink({\r\n    uri: config.apiUrl + \"/\" + config.path\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n\r\nconst jsx = (<div>\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n</div>\r\n);\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement.hasChildNodes()) {\r\n    ReactDOM.hydrate(jsx, rootElement);\r\n} else {\r\n    ReactDOM.render(jsx, rootElement);\r\n}\r\n\r\n\r\n// switch register to unregister to disable serviceWorker (offline available app)\r\n// serviceWorker.unregister();\r\nserviceWorker.register();"],"sourceRoot":""}